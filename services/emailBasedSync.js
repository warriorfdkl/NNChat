const vitrocadService = require('./vitrocadService');
const Chat = require('../models/Chat');
const VitroCADFile = require('../models/VitroCADFile');
const User = require('../models/User');
const ChatParticipant = require('../models/ChatParticipant');
const Message = require('../models/Message');

class EmailBasedSyncService {
  constructor() {
    this.isRunning = false;
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
   * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
   */
  async syncUserByEmail(email, userId) {
    try {
      console.log(`üîÑ Starting email-based sync for: ${email}`);
      
      if (!email) {
        console.log('‚ö†Ô∏è No email provided, skipping VitroCAD sync');
        return { success: false, reason: 'No email provided' };
      }

      // 1. –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VitroCAD –ø–æ email
      const vitrocadUser = await this.findVitroCADUserByEmail(email);
      if (!vitrocadUser) {
        console.log(`‚ö†Ô∏è No VitroCAD user found with email: ${email}`);
        return { success: false, reason: 'VitroCAD user not found' };
      }

      // 2. –°–≤—è–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å VitroCAD
      await this.linkUserWithVitroCAD(userId, vitrocadUser);

      // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userFiles = await this.syncUserFiles(vitrocadUser.id, userId);

      // 4. –°–æ–∑–¥–∞—Ç—å —á–∞—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const chatsCreated = await this.createChatsForUserFiles(userId);

      console.log(`‚úÖ Email-based sync completed for ${email}: ${userFiles.length} files, ${chatsCreated} chats created`);
      
      return {
        success: true,
        vitrocadUser,
        filesCount: userFiles.length,
        chatsCreated
      };
    } catch (error) {
      console.error(`‚ùå Email-based sync failed for ${email}:`, error.message);
      throw error;
    }
  }

  /**
   * –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è VitroCAD –ø–æ email
   */
  async findVitroCADUserByEmail(email) {
    try {
      const vitrocadUsers = await vitrocadService.getUsers();
      
      const user = vitrocadUsers.find(user => {
        const fieldValueMap = user.fieldValueMap || {};
        const userEmail = fieldValueMap.email;
        return userEmail && userEmail.toLowerCase().trim() === email.toLowerCase().trim();
      });

      return user || null;
    } catch (error) {
      console.error('‚ùå Failed to find VitroCAD user by email:', error.message);
      throw error;
    }
  }

  /**
   * –°–≤—è–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å VitroCAD
   */
  async linkUserWithVitroCAD(userId, vitrocadUser) {
    try {
      const user = await User.findByPk(userId);
      if (!user) {
        throw new Error('Local user not found');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = vitrocadService.parseUserData(vitrocadUser);
      
      await user.update({
        vitrocad_id: vitrocadUser.id,
        is_vitrocad_user: true,
        full_name: user.full_name || userData.full_name,
        vitrocad_data: vitrocadUser,
        last_sync: new Date()
      });

      console.log(`‚úÖ Linked user ${user.username} with VitroCAD ID: ${vitrocadUser.id}`);
      return user;
    } catch (error) {
      console.error('‚ùå Failed to link user with VitroCAD:', error.message);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async syncUserFiles(vitrocadUserId, localUserId) {
    try {
      console.log(`üìÅ Syncing files for VitroCAD user: ${vitrocadUserId}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ VitroCAD
      const allFiles = await this.getAllVitroCADFiles();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –∞–≤—Ç–æ—Ä—É
      const userFiles = allFiles.filter(file => file.authorId === vitrocadUserId);
      
      console.log(`üìÅ Found ${userFiles.length} files for user`);
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
      for (const file of userFiles) {
        try {
          await vitrocadService.syncFile({
            ...file,
            authorId: localUserId // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          });
        } catch (error) {
          console.error(`‚ùå Failed to sync file ${file.id}:`, error.message);
        }
      }
      
      return userFiles;
    } catch (error) {
      console.error('‚ùå Failed to sync user files:', error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ VitroCAD
   */
  async getAllVitroCADFiles() {
    try {
      const listIds = [
        '966e62c5-a803-49a0-a1be-e680d130c481' // Files list ID
      ];
      
      let allFiles = [];
      
      for (const listId of listIds) {
        try {
          const files = await vitrocadService.getFilesList(listId, true);
          const fileItems = files.filter(file => vitrocadService.isFileItem(file));
          allFiles = allFiles.concat(fileItems);
        } catch (error) {
          console.error(`‚ùå Failed to get files from list ${listId}:`, error.message);
        }
      }
      
      return allFiles;
    } catch (error) {
      console.error('‚ùå Failed to get all VitroCAD files:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —á–∞—Ç—ã –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async createChatsForUserFiles(userId) {
    try {
      // –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —á–∞—Ç–æ–≤
      const userFiles = await VitroCADFile.findAll({
        where: {
          author_id: userId,
          chat_created: false,
          is_active: true
        }
      });

      let chatsCreated = 0;
      
      for (const file of userFiles) {
        try {
          await this.createChatForFile(file, userId);
          chatsCreated++;
        } catch (error) {
          console.error(`‚ùå Failed to create chat for file ${file.id}:`, error.message);
        }
      }
      
      return chatsCreated;
    } catch (error) {
      console.error('‚ùå Failed to create chats for user files:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å —á–∞—Ç –¥–ª—è —Ñ–∞–π–ª–∞
   */
  async createChatForFile(file, userId) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–∑–¥–∞–Ω –ª–∏ —É–∂–µ —á–∞—Ç
      const existingChat = await Chat.findOne({
        where: {
          vitrocad_file_id: file.id
        }
      });

      if (existingChat) {
        console.log(`‚ö†Ô∏è Chat already exists for file: ${file.name}`);
        return existingChat;
      }

      // –°–æ–∑–¥–∞–µ–º —á–∞—Ç
      const chat = await Chat.create({
        name: `üìÅ ${file.name}`,
        description: `–ß–∞—Ç –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${file.name}`,
        type: 'file',
        created_by: userId,
        vitrocad_file_id: file.id,
        settings: {
          notifications_enabled: true,
          auto_invite_file_editors: true,
          auto_invite_file_approvers: true
        }
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await ChatParticipant.create({
        chat_id: chat.id,
        user_id: userId,
        role: 'admin',
        invitation_type: 'auto'
      });

      // –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await Message.create({
        chat_id: chat.id,
        user_id: userId,
        content: `–ß–∞—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ñ–∞–π–ª–∞ "${file.name}"`,
        type: 'system'
      });

      // –û—Ç–º–µ—á–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –∏–º–µ—é—â–∏–π —á–∞—Ç
      await file.update({ chat_created: true });

      console.log(`‚úÖ Created chat for file: ${file.name}`);
      return chat;
    } catch (error) {
      console.error(`‚ùå Failed to create chat for file ${file.name}:`, error.message);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
   */
  async getUserChatsByEmail(email) {
    try {
      const user = await User.findVitroCADUserByEmail(email);
      if (!user) {
        return [];
      }

      // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      const chats = await Chat.findAll({
        include: [{
          model: ChatParticipant,
          where: { user_id: user.id },
          attributes: ['role', 'joined_at']
        }, {
          model: VitroCADFile,
          as: 'vitrocadFile',
          required: false,
          attributes: ['id', 'name', 'file_type', 'status']
        }],
        order: [['updated_at', 'DESC']]
      });

      return chats;
    } catch (error) {
      console.error(`‚ùå Failed to get user chats by email ${email}:`, error.message);
      throw error;
    }
  }
}

module.exports = new EmailBasedSyncService();